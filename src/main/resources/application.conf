akka {

#  extensions = ["akka.contrib.pattern.ClusterReceptionistExtension", "kamon.metric.Metrics", "kamon.statsd.StatsD", "kamon.system.SystemMetrics"]
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = DEBUG
  log-config-on-start = off
  stdout-loglevel = DEBUG
  log-dead-letters = on

  remote {

    log-remote-lifecycle-events = on

    netty.tcp {
      #  hostname = ${processor.ip}
      #  port = ${processor.port}
      #quarantine-systems-for = 1 ms
      #gate-invalid-addresses-for = 1 ms
      #retry-gate-closed-for = 1 ms

      port = 6666
      #bind-hostname = "0.0.0.0"
      #sync1 = ec2-54-166-250-116.compute-1.amazonaws.com
      hostname = localhost  #"ec2-54-166-250-116.compute-1.amazonaws.com"
    }

    watch-failure-detector {
      heartbeat-interval = 1 s

      threshold = 20.0
    }
  }

  cluster {
    #sync1 = ec2-54-166-250-116.compute-1.amazonaws.com
    seed-nodes = [
      "akka.tcp://sync@localhost:"${akka.remote.netty.tcp.port}
    ]

    use-dispatcher = cluster-dispatcher

    # Disable legacy metrics in akka-cluster.
    metrics.enabled = off
    auto-join = on
    seed-node-timeout = 10s
    roles = ["web-lb"]
    auto-down-unreachable-after = 10 s

    failure-detector {

      # FQCN of the failure detector implementation.
      # It must implement akka.remote.FailureDetector and have
      # a public constructor with a com.typesafe.config.Config and
      # akka.actor.EventStream parameter.
      implementation-class = "akka.remote.PhiAccrualFailureDetector"

      # Defines the failure detector threshold.
      # A low threshold is prone to generate many wrong suspicions but ensures
      # a quick detection in the event of a real crash. Conversely, a high
      # threshold generates fewer mistakes but needs more time to detect
      # actual crashes.
      threshold = 20.0

      # How often keep-alive heaetbeat messages should be sent to each connection.
      heartbeat-interval = 1 s

      acceptable-heartbeat-pause = 30s
    }
  }

  actor {

    #provider = "akka.cluster.ClusterActorRefProvider"

     debug {
      # enable function of Actor.loggable(), which is to log any received message
      # at DEBUG level, see the “Testing Actor Systems” section of the Akka
      # Documentation at http://akka.io/docs
      receive = on

      # enable DEBUG logging of all AutoReceiveMessages (Kill, PoisonPill et.c.)
      autoreceive = on

      # enable DEBUG logging of actor lifecycle changes
      lifecycle = on

      # enable DEBUG logging of all LoggingFSMs for events, transitions and timers
      fsm = on

      # enable DEBUG logging of subscription changes on the eventStream
      event-stream = on

      # enable DEBUG logging of unhandled messages
      unhandled = on

      # enable WARN logging of misconfigured routers
      router-misconfiguration = on
    }
  }
}